/** @type {import('next-sitemap').IConfig} */
const siteUrl = 'https://www.etalones.com';

module.exports = {
  siteUrl,
  generateRobotsTxt: true,

  additionalPaths: async () => {
    const apiUrl = `${process.env.NEXT_PUBLIC_BASE_URL}/api/vacancy/all?type=all`;
    console.log(`üåê –ó–∞–ø—Ä–æ—Å –∫ API –≤–∞–∫–∞–Ω—Å–∏–π: ${apiUrl}`);

    let vacancies = [];

    try {
      const res = await fetch(apiUrl, { cache: 'no-store' });

      if (!res.ok) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π:', res.statusText);
        return [];
      }

      vacancies = await res.json();
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', err);
      return [];
    }

    if (!Array.isArray(vacancies)) {
      console.warn('‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –Ω–µ –º–∞—Å—Å–∏–≤ –≤–∞–∫–∞–Ω—Å–∏–π.');
      return [];
    }

    const paths = vacancies
      .filter(v => typeof v.slug === 'string' && v.slug.trim() !== '')
      .map(vac => ({
        loc: `/vacancy/${vac.slug}`,
        changefreq: 'weekly',
        priority: 0.8,
        lastmod: vac.updatedAt ? new Date(vac.updatedAt).toISOString() : undefined,
      }));

    console.log(`‚úÖ –í sitemap –¥–æ–±–∞–≤–ª–µ–Ω–æ ${paths.length} –≤–∞–∫–∞–Ω—Å–∏–π.`);
    return paths;
  },
};
